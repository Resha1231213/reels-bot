from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.types.input_file import FSInputFile
from states import ReelsBotFlow
from handlers.generate import generate_reels
from pathlib import Path
import os

router = Router()

@router.message(F.text == "/create")
async def cmd_create(msg: Message, state: FSMContext):
    await msg.answer("üë§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 5 —Ñ–æ—Ç–æ –∏–ª–∏ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞")
    await state.set_state(ReelsBotFlow.avatar)


@router.message(ReelsBotFlow.avatar, F.photo | F.video)
async def handle_avatar(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    media_dir = Path(f"media/{user_id}")
    media_dir.mkdir(parents=True, exist_ok=True)

    if msg.photo:
        photos = msg.photo[-1]
        file_path = media_dir / f"avatar_{len(list(media_dir.glob('avatar_*.jpg')))+1}.jpg"
        await photos.download(destination=file_path)
    elif msg.video:
        video = msg.video
        raw_path = media_dir / "avatar_video.mp4"
        await video.download(destination=raw_path)
        os.system(f"ffmpeg -i {raw_path} -ss 00:00:01.000 -vframes 1 {media_dir}/avatar_1.jpg")

    await msg.answer("üéô –¢–µ–ø–µ—Ä—å –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ–∑–≤—É—á–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞")
    await state.set_state(ReelsBotFlow.voice)


@router.message(ReelsBotFlow.voice, F.voice | F.audio)
async def handle_voice(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    media_dir = Path(f"media/{user_id}")
    voice_path = media_dir / "voice.ogg"

    voice = msg.voice or msg.audio
    await voice.download(destination=voice_path)

    await msg.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∏–ª—Å–∞")
    await state.set_state(ReelsBotFlow.script)


@router.message(ReelsBotFlow.script)
async def handle_script(msg: Message, state: FSMContext):
    await state.update_data(script=msg.text)
    await msg.answer("üîó –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')")
    await state.set_state(ReelsBotFlow.competitor)


@router.message(ReelsBotFlow.competitor)
async def handle_competitor(msg: Message, state: FSMContext):
    await state.update_data(competitor_url=msg.text)
    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üü¶ Fullscreen"), KeyboardButton(text="üî≤ 50/50")],
        [KeyboardButton(text="‚ö™ –ö—Ä—É–≥–ª—ã–π –∞–≤–∞—Ç–∞—Ä")]
    ], resize_keyboard=True)
    await msg.answer("üñº –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç Reels:", reply_markup=keyboard)
    await state.set_state(ReelsBotFlow.reels_format)


@router.message(ReelsBotFlow.reels_format)
async def handle_format(msg: Message, state: FSMContext):
    fmt = "full" if "Full" in msg.text else "half" if "50" in msg.text else "circle"
    await state.update_data(format=fmt)

    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚úÖ –° —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏"), KeyboardButton(text="‚ùå –ë–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤")]
    ], resize_keyboard=True)
    await msg.answer("üí¨ –ù—É–∂–Ω—ã –ª–∏ —Å—É–±—Ç–∏—Ç—Ä—ã?", reply_markup=keyboard)
    await state.set_state(ReelsBotFlow.subtitles)


@router.message(ReelsBotFlow.subtitles)
async def handle_subtitles(msg: Message, state: FSMContext):
    subs = "‚úÖ" in msg.text
    await state.update_data(with_subtitles=subs)

    await msg.answer("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–∑–≤—É—á–∫–∏:",
                     reply_markup=ReplyKeyboardMarkup(
                         keyboard=[[KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton(text="üá¨üáß English")]],
                         resize_keyboard=True))
    await state.set_state(ReelsBotFlow.language)


@router.message(ReelsBotFlow.language)
async def handle_language(msg: Message, state: FSMContext):
    lang = "ru" if "–†—É—Å" in msg.text else "en"
    await state.update_data(language=lang)

    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚úÖ –£ –º–µ–Ω—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–∞–∫–µ—Ç"), KeyboardButton(text="‚ùå –ü–æ–∫–∞ –Ω–µ—Ç")]
    ], resize_keyboard=True)
    await msg.answer("üì¶ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–∞–∫–µ—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é?", reply_markup=keyboard)
    await state.set_state(ReelsBotFlow.package_check)


@router.message(ReelsBotFlow.package_check)
async def handle_package_check(msg: Message, state: FSMContext):
    if "‚úÖ" in msg.text:
        data = await state.get_data()
        result = generate_reels(
            user_id=msg.from_user.id,
            text=data.get("script"),
            lang=data.get("language"),
            format_type=data.get("format"),
            with_subtitles=data.get("with_subtitles")
        )

        if result:
            await msg.answer_video(FSInputFile(result), caption="üé¨ –í–∞—à Reels –≥–æ—Ç–æ–≤!", reply_markup=ReplyKeyboardRemove())
        else:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ", reply_markup=ReplyKeyboardRemove())
    else:
        await msg.answer("üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–∞–∫–µ—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ", reply_markup=ReplyKeyboardRemove())

    await state.clear()
