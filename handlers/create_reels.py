# handlers/create_reels.py

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.types.input_file import FSInputFile
from states import FinalGenerateState
from handlers.generate import generate_reels
from pathlib import Path
import os
from utils.parser import extract_info_from_url

router = Router()

@router.message(F.text == "/create")
async def start_create(msg: Message, state: FSMContext):
    await msg.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ 5 —Ñ–æ—Ç–æ –∏–ª–∏ 1 –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞")
    await state.set_state(FinalGenerateState.waiting_for_avatar)


@router.message(FinalGenerateState.waiting_for_avatar, F.photo | F.video)
async def handle_avatar(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    media_dir = Path(f"media/{user_id}")
    media_dir.mkdir(parents=True, exist_ok=True)

    if msg.photo:
        for i, photo in enumerate(msg.photo[-5:], start=1):
            file_path = media_dir / f"avatar_{i}.jpg"
            await photo.download(destination=file_path)
    elif msg.video:
        video = msg.video
        raw_path = media_dir / "avatar_video.mp4"
        await video.download(destination=raw_path)
        os.system(f"ffmpeg -i {raw_path} -ss 00:00:01.000 -vframes 1 {media_dir}/avatar_1.jpg")

    await msg.answer("üéô –ü—Ä–∏—à–ª–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –æ–∑–≤—É—á–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞")
    await state.set_state(FinalGenerateState.waiting_for_voice)


@router.message(FinalGenerateState.waiting_for_voice, F.voice | F.audio)
async def handle_voice(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    voice_path = Path(f"media/{user_id}/voice.ogg")

    voice_file = msg.voice or msg.audio
    await voice_file.download(destination=voice_path)

    await msg.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π")
    await state.set_state(FinalGenerateState.enter_text)


@router.message(FinalGenerateState.enter_text, F.text)
async def handle_text(msg: Message, state: FSMContext):
    await state.update_data(text=msg.text)
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton(text="üá¨üáß English")]], resize_keyboard=True)
    await msg.answer("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–∑–≤—É—á–∫–∏:", reply_markup=keyboard)
    await state.set_state(FinalGenerateState.select_language)


@router.message(FinalGenerateState.select_language, F.text)
async def handle_language(msg: Message, state: FSMContext):
    lang = "ru" if "–†—É—Å" in msg.text else "en"
    await state.update_data(language=lang)

    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üü¶ Fullscreen"), KeyboardButton(text="üî≤ 50/50")],
        [KeyboardButton(text="‚ö™ –ö—Ä—É–≥–ª—ã–π –∞–≤–∞—Ç–∞—Ä")]
    ], resize_keyboard=True)
    await msg.answer("üñº –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç Reels:", reply_markup=keyboard)
    await state.set_state(FinalGenerateState.select_format)


@router.message(FinalGenerateState.select_format, F.text)
async def handle_format(msg: Message, state: FSMContext):
    fmt = "full" if "Full" in msg.text else "half" if "50" in msg.text else "circle"
    await state.update_data(format=fmt)

    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚úÖ –° —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏"), KeyboardButton(text="‚ùå –ë–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤")]
    ], resize_keyboard=True)
    await msg.answer("üí¨ –ù—É–∂–Ω—ã –ª–∏ —Å—É–±—Ç–∏—Ç—Ä—ã?", reply_markup=keyboard)
    await state.set_state(FinalGenerateState.with_subtitles)


@router.message(FinalGenerateState.with_subtitles, F.text)
async def handle_subtitles(msg: Message, state: FSMContext):
    with_subs = "‚úÖ" in msg.text
    data = await state.get_data()
    user_id = msg.from_user.id

    result = generate_reels(
        user_id=user_id,
        text=data.get("text"),
        lang=data.get("language"),
        format_type=data.get("format"),
        with_subtitles=with_subs
    )

    if result:
        await msg.answer_video(FSInputFile(result), caption="üé¨ –í–∞—à Reels –≥–æ—Ç–æ–≤!")
    else:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ")

    await state.clear()


@router.message(F.text == "üîç –ù–∞–π—Ç–∏ —Ä–∏–ª—Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞")
async def ask_competitor_link(msg: Message, state: FSMContext):
    await msg.answer("üîó –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∏–ª—Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ (TikTok, Instagram –∏–ª–∏ YouTube)")
    await state.set_state(FinalGenerateState.waiting_for_competitor_link)


@router.message(FinalGenerateState.waiting_for_competitor_link, F.text)
async def parse_competitor_reel(msg: Message, state: FSMContext):
    url = msg.text.strip()
    title, description = extract_info_from_url(url)

    if not title and not description:
        await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.")
        return

    await msg.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ:\n<b>{title}</b>\n\n{description}")
    await state.update_data(comp_title=title, comp_desc=description)
    await state.set_state(FinalGenerateState.select_format)
