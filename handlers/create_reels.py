# handlers/create_reels.py

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.types.input_file import FSInputFile
from states import FinalGenerateState
from handlers.generate import generate_reels
from pathlib import Path
import os

router = Router()

@router.message(F.text == "/create")
async def start_create(msg: Message, state: FSMContext):
    await msg.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞")
    await state.set_state(FinalGenerateState.waiting_for_avatar)


@router.message(FinalGenerateState.waiting_for_avatar, F.photo | F.video)
async def handle_avatar(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    media_dir = Path(f"media/{user_id}")
    media_dir.mkdir(parents=True, exist_ok=True)

    if msg.photo:
        photo = msg.photo[-1]
        file_path = media_dir / "avatar.jpg"
        await photo.download(destination=file_path)
    elif msg.video:
        video = msg.video
        raw_path = media_dir / "avatar_video.mp4"
        await video.download(destination=raw_path)
        os.system(f"ffmpeg -i {raw_path} -ss 00:00:01.000 -vframes 1 {media_dir}/avatar.jpg")

    await msg.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –æ–∑–≤—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä")
    await state.set_state(FinalGenerateState.enter_text)


@router.message(FinalGenerateState.enter_text)
async def handle_text(msg: Message, state: FSMContext):
    await state.update_data(text=msg.text)
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton(text="üá¨üáß English")]], resize_keyboard=True)
    await msg.answer("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–∑–≤—É—á–∫–∏:", reply_markup=keyboard)
    await state.set_state(FinalGenerateState.select_lang)


@router.message(FinalGenerateState.select_language, F.text)
async def handle_language(msg: Message, state: FSMContext):
    lang = "ru" if "–†—É—Å" in msg.text else "en"
    await state.update_data(language=lang)

    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üü¶ Fullscreen"), KeyboardButton(text="üî≤ 50/50")],
        [KeyboardButton(text="‚ö™ –ö—Ä—É–≥–ª—ã–π –∞–≤–∞—Ç–∞—Ä")]
    ], resize_keyboard=True)
    await msg.answer("üñº –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç Reels:", reply_markup=keyboard)
    await state.set_state(FinalGenerateState.select_format)


@router.message(FinalGenerateState.select_format, F.text)
async def handle_format(msg: Message, state: FSMContext):
    fmt = "full" if "Full" in msg.text else "half" if "50" in msg.text else "circle"
    await state.update_data(format=fmt)

    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚úÖ –° —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏"), KeyboardButton(text="‚ùå –ë–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤")]
    ], resize_keyboard=True)
    await msg.answer("üí¨ –ù—É–∂–Ω—ã –ª–∏ —Å—É–±—Ç–∏—Ç—Ä—ã?", reply_markup=keyboard)
    await state.set_state(FinalGenerateState.with_subtitles)


@router.message(FinalGenerateState.with_subtitles, F.text)
async def handle_subtitles(msg: Message, state: FSMContext):
    with_subs = "‚úÖ" in msg.text
    data = await state.get_data()
    user_id = msg.from_user.id

    result = generate_reels(
        user_id=user_id,
        text=data["text"],
        lang=data["language"],
        format_type=data["format"],
        with_subtitles=with_subs
    )

    if result:
        await msg.answer_video(FSInputFile(result), caption="üé¨ –í–∞—à Reels –≥–æ—Ç–æ–≤!")
    else:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ")

    await state.clear()
