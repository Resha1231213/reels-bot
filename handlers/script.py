from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pathlib import Path

from states.states import ScriptState, GenerateState  # –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç GenerateState

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def get_language_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")],
        [InlineKeyboardButton(text="üáªüá≥ –í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π", callback_data="lang_vi")]
    ])

# –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞
def get_user_script_path(user_id):
    path = Path(f"media/{user_id}/script")
    path.mkdir(parents=True, exist_ok=True)
    return path / "script.txt"

# –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é
@router.message(F.text == "üìù –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç")
async def ask_for_script(message: Message, state: FSMContext):
    await state.set_state(ScriptState.waiting_for_input)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ-–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞.")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —è–∑—ã–∫
@router.message(ScriptState.waiting_for_input)
async def save_script_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    input_text = message.text
    path = get_user_script_path(user_id)

    with open(path, "w", encoding="utf-8") as f:
        f.write(input_text)

    await message.answer(
        "–¢–µ–∫—Å—Ç/—Å—Ü–µ–Ω–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–∑–≤—É—á–∫–∏:",
        reply_markup=get_language_keyboard()
    )
    await state.set_state(GenerateState.choose_language)
