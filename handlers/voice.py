# voice.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from pathlib import Path

router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–∞
class VoiceState(StatesGroup):
    waiting_for_voice = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
def get_continue_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_voice")]
    ])

# –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é
def get_user_voice_path(user_id):
    path = Path(f"media/{user_id}/voice")
    path.mkdir(parents=True, exist_ok=True)
    return path

@router.message(F.text == "üéô –ó–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ–ª–æ—Å")
async def ask_for_voice(message: Message, state: FSMContext):
    await state.set_state(VoiceState.waiting_for_voice)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (mp3, wav).")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(VoiceState.waiting_for_voice, F.voice)
async def save_voice(message: Message, state: FSMContext):
    user_id = message.from_user.id
    voice = message.voice
    path = get_user_voice_path(user_id)
    file_path = path / "voice.ogg"
    await voice.download(destination=file_path)
    await message.answer("–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ ‚úÖ", reply_markup=get_continue_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
@router.message(VoiceState.waiting_for_voice, F.audio)
async def save_audio(message: Message, state: FSMContext):
    user_id = message.from_user.id
    audio = message.audio
    path = get_user_voice_path(user_id)
    file_path = path / audio.file_name
    await audio.download(destination=file_path)
    await message.answer("–ê—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω ‚úÖ", reply_markup=get_continue_keyboard())

@router.callback_query(F.data == "continue_voice")
async def proceed_to_script(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–ª–∏–∫-–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞.")
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é (ScriptState)
    # await state.set_state(ScriptState.waiting_for_input)
